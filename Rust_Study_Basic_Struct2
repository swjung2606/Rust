use std::f32::consts::PI;


struct Sphere {
    radius:f32,
}

struct Cylinder {
    radius:f32,
    height:f32,
}

impl Sphere {
    fn volume(&self) -> f32 {
        return (4.0*PI/3.0)*self.radius.powf(3.0);
    }

    fn surface_area(&self) -> f32 {
        return 4.0*PI*self.radius.powf(2.0);
    }
}


impl Cylinder {
    fn volume(&self) -> f32 {
        return self.radius.powf(2.0)*PI*self.height;
    }

    fn surface_area(&self) -> f32 {
        return (2.0*self.radius.powf(2.0)*PI) + (2.0*self.radius*self.height); 
    }

    fn can_hold(&self, other: &Cylinder) -> bool {
        return self.radius >= other.radius; 
    }
}


fn main() {
    let sphere1 = Sphere {
        radius: 6.0,
    };
    let sphere2 = Sphere {
        radius: 3.0,
    };

    let cylinder1 = Cylinder {
        radius: 4.0,
        height: 5.0,
    };

    let cylinder2 = Cylinder {
        radius: 6.0,
        height: 7.0,
    };

    println!("Can cylinder2 hold cylinder1? : {}", cylinder2.can_hold(&cylinder1));
    println!("");
    println!("Volume of sphere1 = {}", sphere1.volume());
    println!("Surface area of sphere 2 = {}", sphere2.surface_area());
    println!("");
    println!("Volume of cylinder1 = {}", cylinder1.volume());
    println!("Surface area of cylinder2 = {}", cylinder2.surface_area());
}
