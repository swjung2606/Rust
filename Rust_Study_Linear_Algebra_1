use ndarray::{arr1, arr2, Array1, array, ArrayView1};
use nalgebra::Matrix3;


fn l2_norm(x: ArrayView1<f64>) -> f64 {
    x.dot(&x).sqrt()
}


fn normalize(mut x: Array1<f64>) -> Array1<f64> {
    let norm = l2_norm(x.view());
    x.mapv_inplace(|e| e/norm);
    x
}


fn main() {
    let a = arr2(&[[1,2,3],[4,5,6]]);
    let b = arr2(&[[6,5,4],[3,2,1]]);
    let b1 = arr2(&[[6,3],[5,2],[4,1]]);
    let sum = &a+&b;
    
    // Sum of two matrices
    println!("sum of a and b = {}",sum);
    // Muiltiplication of two matrices
    println!("dot product = {}", a.dot(&b1));
    println!("");
    
    let scalar = 4;
    let vector = arr1(&[1,2,3]);
    let matrix = arr2(&[[4,5,6],[7,8,9]]);
    
    let new_vector: Array1<_> = scalar*vector;
    println!("scalar * vector = {}", new_vector);
    
    let new_matrix = matrix.dot(&new_vector);
    println!("matrix * new_vector = {}",new_matrix);
    println!("");
    
    // Norm part
    let x = array![1.0,2.0,3.0,4.0,5.0];
    println!("l2_norm of x = {}", l2_norm(x.view()));
    println!("Normalizing x = {}", normalize(x));
    println!("");
    
    // Inverse matrix part
    let m1 = Matrix3::new(2.0,1.0,1.0,3.0,2.0,1.0,2.0,1.0,2.0);
    println!("m1 = {}", m1);
    match m1.try_inverse() {
        Some(inv) => {
            println!("The inverse of m1 is : {}", inv);
        }
        None => {
            println!("m1 is not invertible.");
        }
    }
}
